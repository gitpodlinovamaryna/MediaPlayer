/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201801251438.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_MEDIAPLAYER_Media_Player_DBUS_STUB_ADAPTER_HPP_
#define V1_MEDIAPLAYER_Media_Player_DBUS_STUB_ADAPTER_HPP_

#include <v1/MediaPlayer/MediaPlayerStub.hpp>
#include "v1/MediaPlayer/MediaPlayerDBusDeployment.hpp"
#include <v1/MediaPlayer/MediaPlayerTypesDBusDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace MediaPlayer {

template <typename _Stub = ::v1::MediaPlayer::MediaPlayerStub, typename... _Stubs>
class MediaPlayerDBusStubAdapterInternal
    : public virtual MediaPlayerStubAdapter,
      public CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...>
     {
public:
    typedef CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...> MediaPlayerDBusStubAdapterHelper;

    ~MediaPlayerDBusStubAdapterInternal() {
        deactivateManagedInstances();
        MediaPlayerDBusStubAdapterHelper::deinit();
    }

    virtual bool hasFreedesktopProperties() {
        return false;
    }

    inline static const char* getInterface() {
        return MediaPlayer::getInterface();
    }

    void fireTrackNameAttributeChanged(const std::string& value);

    void fireTrackTotalLengthAttributeChanged(const uint16_t& value);

    void firePlayPositionAttributeChanged(const uint16_t& value);

    void fireCurrentStateAttributeChanged(const ::v1::MediaPlayer::MediaPlayerTypes::CurrentState& value);

    void deactivateManagedInstances() {
    }

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        CommonAPI::Version
        > getMediaPlayerInterfaceVersionStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::MediaPlayer::MediaPlayerStub,
            std::string,
            CommonAPI::DBus::StringDeployment
            > getTrackNameAttributeStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::MediaPlayer::MediaPlayerStub,
            uint16_t
            > getTrackTotalLengthAttributeStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::MediaPlayer::MediaPlayerStub,
            uint16_t
            > getPlayPositionAttributeStubDispatcher;
    static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
            ::v1::MediaPlayer::MediaPlayerStub,
            uint16_t
            > setPlayPositionAttributeStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::MediaPlayer::MediaPlayerStub,
            ::v1::MediaPlayer::MediaPlayerTypes::CurrentState
            > getCurrentStateAttributeStubDispatcher;

    static CommonAPI::DBus::DBusMethodStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        std::tuple< >,
        std::tuple< >
        > playStubDispatcher;

    static CommonAPI::DBus::DBusMethodStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        std::tuple< >,
        std::tuple< >
        > pauseStubDispatcher;

    static CommonAPI::DBus::DBusMethodStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        std::tuple< >,
        std::tuple< >
        > nextStubDispatcher;

    static CommonAPI::DBus::DBusMethodStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        std::tuple< >,
        std::tuple< >
        > previousStubDispatcher;

    MediaPlayerDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
    : CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      MediaPlayerDBusStubAdapterHelper(_address, _connection, false, _stub) {
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "getTrackNameAttribute", "" }, &getTrackNameAttributeStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "getTrackTotalLengthAttribute", "" }, &getTrackTotalLengthAttributeStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "getPlayPositionAttribute", "" }, &getPlayPositionAttributeStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "setPlayPositionAttribute", "q" }, &setPlayPositionAttributeStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "getCurrentStateAttribute", "" }, &getCurrentStateAttributeStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "play", "" }, &playStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "pause", "" }, &pauseStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "next", "" }, &nextStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "previous", "" }, &previousStubDispatcher);
        MediaPlayerDBusStubAdapterHelper::addStubDispatcher({ "getInterfaceVersion", "" }, &getMediaPlayerInterfaceVersionStubDispatcher);
    }

protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const {
        static const std::string introspectionData =
            "<method name=\"getInterfaceVersion\">\n"
                "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"getTrackNameAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
            "</method>\n"
            "<signal name=\"onTrackNameAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
            "</signal>\n"
            "<method name=\"getTrackTotalLengthAttribute\">\n"
            "<arg name=\"value\" type=\"q\" direction=\"out\" />"
            "</method>\n"
            "<signal name=\"onTrackTotalLengthAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"q\" />\n"
            "</signal>\n"
            "<method name=\"getPlayPositionAttribute\">\n"
            "<arg name=\"value\" type=\"q\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"setPlayPositionAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"q\" direction=\"out\" />\n"
            "</method>\n"
            "<signal name=\"onPlayPositionAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"q\" />\n"
            "</signal>\n"
            "<method name=\"getCurrentStateAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
            "</method>\n"
            "<signal name=\"onCurrentStateAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
            "</signal>\n"
            "<method name=\"play\">\n"
            "</method>\n"
            "<method name=\"pause\">\n"
            "</method>\n"
            "<method name=\"next\">\n"
            "</method>\n"
            "<method name=\"previous\">\n"
            "</method>\n"
            ;
        return introspectionData.c_str();
    }

private:
};


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
    ::v1::MediaPlayer::MediaPlayerStub,
    CommonAPI::Version
    > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::getMediaPlayerInterfaceVersionStubDispatcher(&MediaPlayerStub::lockInterfaceVersionAttribute, &MediaPlayerStub::getInterfaceVersion, "uu");

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::getTrackNameAttributeStubDispatcher(
            &::v1::MediaPlayer::MediaPlayerStub::lockTrackNameAttribute,
            &::v1::MediaPlayer::MediaPlayerStub::getTrackNameAttribute
            , "s"
            );

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        uint16_t
        > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::getTrackTotalLengthAttributeStubDispatcher(
            &::v1::MediaPlayer::MediaPlayerStub::lockTrackTotalLengthAttribute,
            &::v1::MediaPlayer::MediaPlayerStub::getTrackTotalLengthAttribute
            , "q"
            );

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        uint16_t
        > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::getPlayPositionAttributeStubDispatcher(
            &::v1::MediaPlayer::MediaPlayerStub::lockPlayPositionAttribute,
            &::v1::MediaPlayer::MediaPlayerStub::getPlayPositionAttribute
            , "q"
            );
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        uint16_t
        > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::setPlayPositionAttributeStubDispatcher(
                &::v1::MediaPlayer::MediaPlayerStub::lockPlayPositionAttribute,
                &::v1::MediaPlayer::MediaPlayerStub::getPlayPositionAttribute,
                &MediaPlayerStubRemoteEvent::onRemoteSetPlayPositionAttribute,
                &MediaPlayerStubRemoteEvent::onRemotePlayPositionAttributeChanged
                ,&MediaPlayerStubAdapter::firePlayPositionAttributeChanged
                ,"q"
                );

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::MediaPlayer::MediaPlayerStub,
        ::v1::MediaPlayer::MediaPlayerTypes::CurrentState
        > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::getCurrentStateAttributeStubDispatcher(
            &::v1::MediaPlayer::MediaPlayerStub::lockCurrentStateAttribute,
            &::v1::MediaPlayer::MediaPlayerStub::getCurrentStateAttribute
            , "i"
            );


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodStubDispatcher<
    MediaPlayerStub,
    std::tuple< >,
    std::tuple< >

    > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::playStubDispatcher(&MediaPlayerStub::play,
    std::make_tuple());


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodStubDispatcher<
    MediaPlayerStub,
    std::tuple< >,
    std::tuple< >

    > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::pauseStubDispatcher(&MediaPlayerStub::pause,
    std::make_tuple());


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodStubDispatcher<
    MediaPlayerStub,
    std::tuple< >,
    std::tuple< >

    > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::nextStubDispatcher(&MediaPlayerStub::next,
    std::make_tuple());


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodStubDispatcher<
    MediaPlayerStub,
    std::tuple< >,
    std::tuple< >

    > MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::previousStubDispatcher(&MediaPlayerStub::previous,
    std::make_tuple());

template <typename _Stub, typename... _Stubs>
void MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::fireTrackNameAttributeChanged(const std::string& value) {
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onTrackNameAttributeChanged",
            "s",
            deployedValue
    
    );
}

template <typename _Stub, typename... _Stubs>
void MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::fireTrackTotalLengthAttributeChanged(const uint16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint16_t
    >>
        ::sendSignal(
            *this,
            "onTrackTotalLengthAttributeChanged",
            "q",
            value
    
    );
}

template <typename _Stub, typename... _Stubs>
void MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::firePlayPositionAttributeChanged(const uint16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint16_t
    >>
        ::sendSignal(
            *this,
            "onPlayPositionAttributeChanged",
            "q",
            value
    
    );
}

template <typename _Stub, typename... _Stubs>
void MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>::fireCurrentStateAttributeChanged(const ::v1::MediaPlayer::MediaPlayerTypes::CurrentState& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::MediaPlayer::MediaPlayerTypes::CurrentState
    >>
        ::sendSignal(
            *this,
            "onCurrentStateAttributeChanged",
            "i",
            value
    
    );
}


template <typename _Stub = ::v1::MediaPlayer::MediaPlayerStub, typename... _Stubs>
class MediaPlayerDBusStubAdapter
    : public MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< MediaPlayerDBusStubAdapter<_Stub, _Stubs...>> {
public:
    MediaPlayerDBusStubAdapter(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
        : CommonAPI::DBus::DBusStubAdapter(
            _address,
            _connection,
            false),
          MediaPlayerDBusStubAdapterInternal<_Stub, _Stubs...>(
            _address,
            _connection,
            _stub) {
    }
};

} // namespace MediaPlayer
} // namespace v1

#endif // V1_MEDIAPLAYER_Media_Player_DBUS_STUB_ADAPTER_HPP_
