/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201801251438.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/MediaPlayer/MediaPlayerDBusProxy.hpp>

namespace v1 {
namespace MediaPlayer {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createMediaPlayerDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< MediaPlayerDBusProxy>(_address, _connection);
}

void initializeMediaPlayerDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        MediaPlayer::getInterface(),
        &createMediaPlayerDBusProxy);
}

INITIALIZER(registerMediaPlayerDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeMediaPlayerDBusProxy);
}

MediaPlayerDBusProxy::MediaPlayerDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
,        trackName_(*this, "onTrackNameAttributeChanged", "s", "getTrackNameAttribute", static_cast< CommonAPI::DBus::StringDeployment* >(nullptr)),
        trackTotalLength_(*this, "onTrackTotalLengthAttributeChanged", "q", "getTrackTotalLengthAttribute", static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
        playPosition_(*this, "onPlayPositionAttributeChanged", "setPlayPositionAttribute", "q", "getPlayPositionAttribute", static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
        currentState_(*this, "onCurrentStateAttributeChanged", "i", "getCurrentStateAttribute", static_cast< CommonAPI::EmptyDeployment* >(nullptr))
{
}

      MediaPlayerDBusProxy::TrackNameAttribute& MediaPlayerDBusProxy::getTrackNameAttribute() {
          return trackName_;
      }
      MediaPlayerDBusProxy::TrackTotalLengthAttribute& MediaPlayerDBusProxy::getTrackTotalLengthAttribute() {
          return trackTotalLength_;
      }
      MediaPlayerDBusProxy::PlayPositionAttribute& MediaPlayerDBusProxy::getPlayPositionAttribute() {
          return playPosition_;
      }
      MediaPlayerDBusProxy::CurrentStateAttribute& MediaPlayerDBusProxy::getCurrentStateAttribute() {
          return currentState_;
      }


    void MediaPlayerDBusProxy::play(CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
            >::callMethod(
        *this,
        "play",
        "",
_internalCallStatus);
}
    void MediaPlayerDBusProxy::pause(CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
            >::callMethod(
        *this,
        "pause",
        "",
_internalCallStatus);
}
    void MediaPlayerDBusProxy::next(CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
            >::callMethod(
        *this,
        "next",
        "",
_internalCallStatus);
}
    void MediaPlayerDBusProxy::previous(CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
            >::callMethod(
        *this,
        "previous",
        "",
_internalCallStatus);
}


void MediaPlayerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace MediaPlayer
      } // namespace v1
