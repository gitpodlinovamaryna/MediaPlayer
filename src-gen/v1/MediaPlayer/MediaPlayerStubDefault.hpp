/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_MEDIAPLAYER_Media_Player_STUB_DEFAULT_HPP_
#define V1_MEDIAPLAYER_Media_Player_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/MediaPlayer/MediaPlayerStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace MediaPlayer {

/**
 * Provides a default implementation for MediaPlayerStubRemoteEvent and
 * MediaPlayerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT MediaPlayerStubDefault
    : public virtual MediaPlayerStub {
public:
    COMMONAPI_EXPORT MediaPlayerStubDefault();

    COMMONAPI_EXPORT MediaPlayerStubRemoteEvent* initStubAdapter(const std::shared_ptr< MediaPlayerStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    COMMONAPI_EXPORT virtual const std::string& getTrackNameAttribute();
    COMMONAPI_EXPORT virtual const std::string& getTrackNameAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setTrackNameAttribute(std::string _value);
    COMMONAPI_EXPORT virtual const uint16_t& getTrackTotalLengthAttribute();
    COMMONAPI_EXPORT virtual const uint16_t& getTrackTotalLengthAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setTrackTotalLengthAttribute(uint16_t _value);
    COMMONAPI_EXPORT virtual const uint16_t& getPlayPositionAttribute();
    COMMONAPI_EXPORT virtual const uint16_t& getPlayPositionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setPlayPositionAttribute(uint16_t _value);
    COMMONAPI_EXPORT virtual void setPlayPositionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value);
    COMMONAPI_EXPORT virtual const ::v1::MediaPlayer::MediaPlayerTypes::CurrentState& getCurrentStateAttribute();
    COMMONAPI_EXPORT virtual const ::v1::MediaPlayer::MediaPlayerTypes::CurrentState& getCurrentStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setCurrentStateAttribute(::v1::MediaPlayer::MediaPlayerTypes::CurrentState _value);

    COMMONAPI_EXPORT virtual void play(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void pause(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void next(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void previous(const std::shared_ptr<CommonAPI::ClientId> _client);


    
protected:
    COMMONAPI_EXPORT virtual bool trySetTrackNameAttribute(std::string _value);
    COMMONAPI_EXPORT virtual bool validateTrackNameAttributeRequestedValue(const std::string &_value);
    COMMONAPI_EXPORT virtual bool trySetTrackTotalLengthAttribute(uint16_t _value);
    COMMONAPI_EXPORT virtual bool validateTrackTotalLengthAttributeRequestedValue(const uint16_t &_value);
    COMMONAPI_EXPORT virtual bool trySetPlayPositionAttribute(uint16_t _value);
    COMMONAPI_EXPORT virtual bool validatePlayPositionAttributeRequestedValue(const uint16_t &_value);
    COMMONAPI_EXPORT virtual void onRemotePlayPositionAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetCurrentStateAttribute(::v1::MediaPlayer::MediaPlayerTypes::CurrentState _value);
    COMMONAPI_EXPORT virtual bool validateCurrentStateAttributeRequestedValue(const ::v1::MediaPlayer::MediaPlayerTypes::CurrentState &_value);
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual MediaPlayerStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(MediaPlayerStubDefault *_defaultStub);



        COMMONAPI_EXPORT virtual bool onRemoteSetPlayPositionAttribute(uint16_t _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetPlayPositionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value);
        COMMONAPI_EXPORT virtual void onRemotePlayPositionAttributeChanged();



    private:
        MediaPlayerStubDefault *defaultStub_;
    };
protected:
    MediaPlayerStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    std::string trackNameAttributeValue_ {};
    uint16_t trackTotalLengthAttributeValue_ {};
    uint16_t playPositionAttributeValue_ {};
    ::v1::MediaPlayer::MediaPlayerTypes::CurrentState currentStateAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace MediaPlayer
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_MEDIAPLAYER_Media_Player_STUB_DEFAULT
