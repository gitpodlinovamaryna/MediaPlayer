/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_MEDIAPLAYER_Media_Player_PROXY_HPP_
#define V1_MEDIAPLAYER_Media_Player_PROXY_HPP_

#include <v1/MediaPlayer/MediaPlayerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace MediaPlayer {

template <typename ... _AttributeExtensions>
class MediaPlayerProxy
    : virtual public MediaPlayer,
      virtual public MediaPlayerProxyBase,
      virtual public _AttributeExtensions... {
public:
    MediaPlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MediaPlayerProxy();

    typedef MediaPlayer InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute trackName.
     */
    virtual TrackNameAttribute& getTrackNameAttribute() {
        return delegate_->getTrackNameAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute trackTotalLength.
     */
    virtual TrackTotalLengthAttribute& getTrackTotalLengthAttribute() {
        return delegate_->getTrackTotalLengthAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute playPosition.
     */
    virtual PlayPositionAttribute& getPlayPositionAttribute() {
        return delegate_->getPlayPositionAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute currentState.
     */
    virtual CurrentStateAttribute& getCurrentStateAttribute() {
        return delegate_->getCurrentStateAttribute();
    }


    /**
     * Calls play with Fire&Forget semantics.
     *
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void play(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls pause with Fire&Forget semantics.
     *
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls next with Fire&Forget semantics.
     *
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void next(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls previous with Fire&Forget semantics.
     *
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< MediaPlayerProxyBase> delegate_;
};

typedef MediaPlayerProxy<> MediaPlayerProxyDefault;

namespace MediaPlayerExtensions {
    template <template <typename > class _ExtensionType>
    class TrackNameAttributeExtension {
     public:
        typedef _ExtensionType< MediaPlayerProxyBase::TrackNameAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< MediaPlayerProxyBase::TrackNameAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TrackNameAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getTrackNameAttribute()) {
        }
    
        inline extension_type& getTrackNameAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TrackTotalLengthAttributeExtension {
     public:
        typedef _ExtensionType< MediaPlayerProxyBase::TrackTotalLengthAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< MediaPlayerProxyBase::TrackTotalLengthAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TrackTotalLengthAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getTrackTotalLengthAttribute()) {
        }
    
        inline extension_type& getTrackTotalLengthAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PlayPositionAttributeExtension {
     public:
        typedef _ExtensionType< MediaPlayerProxyBase::PlayPositionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< MediaPlayerProxyBase::PlayPositionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        PlayPositionAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getPlayPositionAttribute()) {
        }
    
        inline extension_type& getPlayPositionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CurrentStateAttributeExtension {
     public:
        typedef _ExtensionType< MediaPlayerProxyBase::CurrentStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< MediaPlayerProxyBase::CurrentStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CurrentStateAttributeExtension(MediaPlayerProxyBase& proxy): attributeExtension_(proxy.getCurrentStateAttribute()) {
        }
    
        inline extension_type& getCurrentStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace MediaPlayerExtensions

//
// MediaPlayerProxy Implementation
//
template <typename ... _AttributeExtensions>
MediaPlayerProxy<_AttributeExtensions...>::MediaPlayerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< MediaPlayerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< MediaPlayerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MediaPlayerProxy<_AttributeExtensions...>::~MediaPlayerProxy() {
}

template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::play(CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->play(_internalCallStatus);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::pause(CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->pause(_internalCallStatus);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::next(CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->next(_internalCallStatus);
}
template <typename ... _AttributeExtensions>
void MediaPlayerProxy<_AttributeExtensions...>::previous(CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->previous(_internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MediaPlayerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MediaPlayerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MediaPlayerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MediaPlayerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MediaPlayerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace MediaPlayer
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::MediaPlayer::MediaPlayerProxy,
    _AttributeExtension> {
    typedef typename ::v1::MediaPlayer::MediaPlayerProxy<
            ::v1::MediaPlayer::MediaPlayerExtensions::TrackNameAttributeExtension<_AttributeExtension>, 
            ::v1::MediaPlayer::MediaPlayerExtensions::TrackTotalLengthAttributeExtension<_AttributeExtension>, 
            ::v1::MediaPlayer::MediaPlayerExtensions::PlayPositionAttributeExtension<_AttributeExtension>, 
            ::v1::MediaPlayer::MediaPlayerExtensions::CurrentStateAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_MEDIAPLAYER_Media_Player_PROXY_HPP_
