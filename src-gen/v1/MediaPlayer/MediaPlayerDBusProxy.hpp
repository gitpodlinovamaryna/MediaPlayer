/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201801251438.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_MEDIAPLAYER_Media_Player_DBUS_PROXY_HPP_
#define V1_MEDIAPLAYER_Media_Player_DBUS_PROXY_HPP_

#include <v1/MediaPlayer/MediaPlayerProxyBase.hpp>
#include "v1/MediaPlayer/MediaPlayerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace MediaPlayer {

class MediaPlayerDBusProxy
    : virtual public MediaPlayerProxyBase,
      virtual public CommonAPI::DBus::DBusProxy {
public:
    MediaPlayerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~MediaPlayerDBusProxy() { }

    virtual TrackNameAttribute& getTrackNameAttribute();
    virtual TrackTotalLengthAttribute& getTrackTotalLengthAttribute();
    virtual PlayPositionAttribute& getPlayPositionAttribute();
    virtual CurrentStateAttribute& getCurrentStateAttribute();


    virtual void play(CommonAPI::CallStatus &_internalCallStatus);
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus);
    virtual void next(CommonAPI::CallStatus &_internalCallStatus);
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:

    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TrackNameAttribute, CommonAPI::DBus::StringDeployment>> trackName_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TrackTotalLengthAttribute>> trackTotalLength_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayPositionAttribute>> playPosition_;
    class DBuscurrentState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentStateAttribute>> {
    public:
    template <typename... _A>
        DBuscurrentState_Attribute(DBusProxy &_proxy,
            _A ... arguments)
            : CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentStateAttribute>>(
                _proxy, arguments...) {}
    };
    DBuscurrentState_Attribute currentState_;


};

} // namespace MediaPlayer
} // namespace v1

#endif // V1_MEDIAPLAYER_Media_Player_DBUS_PROXY_HPP_

