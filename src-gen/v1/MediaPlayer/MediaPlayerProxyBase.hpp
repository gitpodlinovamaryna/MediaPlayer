/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_MEDIAPLAYER_Media_Player_PROXY_BASE_HPP_
#define V1_MEDIAPLAYER_Media_Player_PROXY_BASE_HPP_

#include <v1/MediaPlayer/MediaPlayer.hpp>


#include <v1/MediaPlayer/MediaPlayerTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace MediaPlayer {

class MediaPlayerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute< std::string> TrackNameAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute< uint16_t> TrackTotalLengthAttribute;
    typedef CommonAPI::ObservableAttribute< uint16_t> PlayPositionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute< ::v1::MediaPlayer::MediaPlayerTypes::CurrentState> CurrentStateAttribute;


    virtual TrackNameAttribute& getTrackNameAttribute() = 0;
    virtual TrackTotalLengthAttribute& getTrackTotalLengthAttribute() = 0;
    virtual PlayPositionAttribute& getPlayPositionAttribute() = 0;
    virtual CurrentStateAttribute& getCurrentStateAttribute() = 0;


    /**
     * @invariant Fire And Forget
     */
    virtual void play(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * @invariant Fire And Forget
     */
    virtual void pause(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * @invariant Fire And Forget
     */
    virtual void next(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * @invariant Fire And Forget
     */
    virtual void previous(CommonAPI::CallStatus &_internalCallStatus) = 0;
};

} // namespace MediaPlayer
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_MEDIAPLAYER_Media_Player_PROXY_BASE_HPP_
