/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_MEDIAPLAYER_Media_Player_STUB_HPP_
#define V1_MEDIAPLAYER_Media_Player_STUB_HPP_

#include <functional>
#include <sstream>



#include <v1/MediaPlayer/MediaPlayerTypes.hpp>

#include <v1/MediaPlayer/MediaPlayer.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace MediaPlayer {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service MediaPlayer. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class MediaPlayerStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual MediaPlayer {
 public:
    ///Notifies all remote listeners about a change of value of the attribute trackName.
    virtual void fireTrackNameAttributeChanged(const std::string& trackName) = 0;
    ///Notifies all remote listeners about a change of value of the attribute trackTotalLength.
    virtual void fireTrackTotalLengthAttributeChanged(const uint16_t& trackTotalLength) = 0;
    ///Notifies all remote listeners about a change of value of the attribute playPosition.
    virtual void firePlayPositionAttributeChanged(const uint16_t& playPosition) = 0;
    ///Notifies all remote listeners about a change of value of the attribute currentState.
    virtual void fireCurrentStateAttributeChanged(const ::v1::MediaPlayer::MediaPlayerTypes::CurrentState& currentState) = 0;



    virtual void deactivateManagedInstances() = 0;

    void lockTrackNameAttribute(bool _lockAccess) {
        if (_lockAccess) {
            trackNameMutex_.lock();
        } else {
            trackNameMutex_.unlock();
        }
    }
    void lockTrackTotalLengthAttribute(bool _lockAccess) {
        if (_lockAccess) {
            trackTotalLengthMutex_.lock();
        } else {
            trackTotalLengthMutex_.unlock();
        }
    }
    void lockPlayPositionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            playPositionMutex_.lock();
        } else {
            playPositionMutex_.unlock();
        }
    }
    void lockCurrentStateAttribute(bool _lockAccess) {
        if (_lockAccess) {
            currentStateMutex_.lock();
        } else {
            currentStateMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

    std::recursive_mutex trackNameMutex_;
    std::recursive_mutex trackTotalLengthMutex_;
    std::recursive_mutex playPositionMutex_;
    std::recursive_mutex currentStateMutex_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for MediaPlayer.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MediaPlayerStubRemoteEvent
{
public:
    virtual ~MediaPlayerStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute playPosition
    virtual bool onRemoteSetPlayPositionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) = 0;
    /// Action callback for remote set requests on the attribute playPosition
    virtual void onRemotePlayPositionAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service MediaPlayer to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MediaPlayerStub
    : public virtual CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>
{
public:

    virtual ~MediaPlayerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }

    /// Provides getter access to the attribute trackName
    virtual const std::string &getTrackNameAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTrackNameAttributeChanged(std::string _value) {
    auto stubAdapter = CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTrackNameAttributeChanged(_value);
    }
    void lockTrackNameAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTrackNameAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute trackTotalLength
    virtual const uint16_t &getTrackTotalLengthAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireTrackTotalLengthAttributeChanged(uint16_t _value) {
    auto stubAdapter = CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireTrackTotalLengthAttributeChanged(_value);
    }
    void lockTrackTotalLengthAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockTrackTotalLengthAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute playPosition
    virtual const uint16_t &getPlayPositionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void firePlayPositionAttributeChanged(uint16_t _value) {
    auto stubAdapter = CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->firePlayPositionAttributeChanged(_value);
    }
    void lockPlayPositionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockPlayPositionAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute currentState
    virtual const ::v1::MediaPlayer::MediaPlayerTypes::CurrentState &getCurrentStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireCurrentStateAttributeChanged(::v1::MediaPlayer::MediaPlayerTypes::CurrentState _value) {
    auto stubAdapter = CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireCurrentStateAttributeChanged(_value);
    }
    void lockCurrentStateAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockCurrentStateAttribute(_lockAccess);
    }

    /// This is the method that will be called on remote calls on the method play.
    virtual void play(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// This is the method that will be called on remote calls on the method pause.
    virtual void pause(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// This is the method that will be called on remote calls on the method next.
    virtual void next(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// This is the method that will be called on remote calls on the method previous.
    virtual void previous(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    
    using CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<MediaPlayerStubAdapter, MediaPlayerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef MediaPlayerStubRemoteEvent RemoteEventType;
    typedef MediaPlayer StubInterface;
};

} // namespace MediaPlayer
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_MEDIAPLAYER_Media_Player_STUB_HPP_
